<?php

/**
 * BaseLanguage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $id
 * @property string $name
 * @property integer $order_number
 * @property integer $active
 * @property Doctrine_Collection $sfGuardUser
 * @property Doctrine_Collection $Petition
 * @property Doctrine_Collection $PetitionText
 * @property Doctrine_Collection $PrivacyPolicy
 * @property Doctrine_Collection $DefaultText
 * @property Doctrine_Collection $Contact
 * @property Doctrine_Collection $PetitionSigningWave
 * @property Doctrine_Collection $FacebookTab
 * @property Doctrine_Collection $Store
 * @property Doctrine_Collection $CampaignStore
 * 
 * @method string              getId()                  Returns the current record's "id" value
 * @method string              getName()                Returns the current record's "name" value
 * @method integer             getOrderNumber()         Returns the current record's "order_number" value
 * @method integer             getActive()              Returns the current record's "active" value
 * @method Doctrine_Collection getSfGuardUser()         Returns the current record's "sfGuardUser" collection
 * @method Doctrine_Collection getPetition()            Returns the current record's "Petition" collection
 * @method Doctrine_Collection getPetitionText()        Returns the current record's "PetitionText" collection
 * @method Doctrine_Collection getPrivacyPolicy()       Returns the current record's "PrivacyPolicy" collection
 * @method Doctrine_Collection getDefaultText()         Returns the current record's "DefaultText" collection
 * @method Doctrine_Collection getContact()             Returns the current record's "Contact" collection
 * @method Doctrine_Collection getPetitionSigningWave() Returns the current record's "PetitionSigningWave" collection
 * @method Doctrine_Collection getFacebookTab()         Returns the current record's "FacebookTab" collection
 * @method Doctrine_Collection getStore()               Returns the current record's "Store" collection
 * @method Doctrine_Collection getCampaignStore()       Returns the current record's "CampaignStore" collection
 * @method Language            setId()                  Sets the current record's "id" value
 * @method Language            setName()                Sets the current record's "name" value
 * @method Language            setOrderNumber()         Sets the current record's "order_number" value
 * @method Language            setActive()              Sets the current record's "active" value
 * @method Language            setSfGuardUser()         Sets the current record's "sfGuardUser" collection
 * @method Language            setPetition()            Sets the current record's "Petition" collection
 * @method Language            setPetitionText()        Sets the current record's "PetitionText" collection
 * @method Language            setPrivacyPolicy()       Sets the current record's "PrivacyPolicy" collection
 * @method Language            setDefaultText()         Sets the current record's "DefaultText" collection
 * @method Language            setContact()             Sets the current record's "Contact" collection
 * @method Language            setPetitionSigningWave() Sets the current record's "PetitionSigningWave" collection
 * @method Language            setFacebookTab()         Sets the current record's "FacebookTab" collection
 * @method Language            setStore()               Sets the current record's "Store" collection
 * @method Language            setCampaignStore()       Sets the current record's "CampaignStore" collection
 * 
 * @package    policat
 * @subpackage model
 * @author     Martin
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLanguage extends myDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('language');
        $this->hasColumn('id', 'string', 5, array(
             'type' => 'string',
             'primary' => true,
             'length' => 5,
             ));
        $this->hasColumn('name', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('order_number', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('active', 'integer', 1, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 1,
             'length' => 1,
             ));


        $this->index('language_order_num', array(
             'fields' => 
             array(
              0 => 'order_number',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('sfGuardUser', array(
             'local' => 'id',
             'foreign' => 'language_id'));

        $this->hasMany('Petition', array(
             'local' => 'id',
             'foreign' => 'language_id'));

        $this->hasMany('PetitionText', array(
             'local' => 'id',
             'foreign' => 'language_id'));

        $this->hasMany('PrivacyPolicy', array(
             'local' => 'id',
             'foreign' => 'language_id'));

        $this->hasMany('DefaultText', array(
             'local' => 'id',
             'foreign' => 'language_id'));

        $this->hasMany('Contact', array(
             'local' => 'id',
             'foreign' => 'language_id'));

        $this->hasMany('PetitionSigningWave', array(
             'local' => 'id',
             'foreign' => 'language_id'));

        $this->hasMany('FacebookTab', array(
             'local' => 'id',
             'foreign' => 'language_id'));

        $this->hasMany('Store', array(
             'local' => 'id',
             'foreign' => 'language_id'));

        $this->hasMany('CampaignStore', array(
             'local' => 'id',
             'foreign' => 'language_id'));

        $cachetaggable0 = new Doctrine_Template_Cachetaggable(array(
             ));
        $this->actAs($cachetaggable0);
    }
}