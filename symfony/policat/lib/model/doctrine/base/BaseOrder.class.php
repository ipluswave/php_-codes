<?php

/**
 * BaseOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $status
 * @property date $paid_at
 * @property integer $user_id
 * @property string $first_name
 * @property string $last_name
 * @property string $organisation
 * @property string $street
 * @property string $city
 * @property string $post_code
 * @property string $country
 * @property string $vat
 * @property decimal $tax
 * @property clob $tax_note
 * @property string $paypal_payment_id
 * @property string $paypal_sale_id
 * @property integer $paypal_status
 * @property sfGuardUser $User
 * @property Campaign $activeCampaign
 * @property Doctrine_Collection $Quotas
 * @property Bill $Bill
 * 
 * @method integer             getId()                Returns the current record's "id" value
 * @method integer             getStatus()            Returns the current record's "status" value
 * @method date                getPaidAt()            Returns the current record's "paid_at" value
 * @method integer             getUserId()            Returns the current record's "user_id" value
 * @method string              getFirstName()         Returns the current record's "first_name" value
 * @method string              getLastName()          Returns the current record's "last_name" value
 * @method string              getOrganisation()      Returns the current record's "organisation" value
 * @method string              getStreet()            Returns the current record's "street" value
 * @method string              getCity()              Returns the current record's "city" value
 * @method string              getPostCode()          Returns the current record's "post_code" value
 * @method string              getCountry()           Returns the current record's "country" value
 * @method string              getVat()               Returns the current record's "vat" value
 * @method decimal             getTax()               Returns the current record's "tax" value
 * @method clob                getTaxNote()           Returns the current record's "tax_note" value
 * @method string              getPaypalPaymentId()   Returns the current record's "paypal_payment_id" value
 * @method string              getPaypalSaleId()      Returns the current record's "paypal_sale_id" value
 * @method integer             getPaypalStatus()      Returns the current record's "paypal_status" value
 * @method sfGuardUser         getUser()              Returns the current record's "User" value
 * @method Campaign            getActiveCampaign()    Returns the current record's "activeCampaign" value
 * @method Doctrine_Collection getQuotas()            Returns the current record's "Quotas" collection
 * @method Bill                getBill()              Returns the current record's "Bill" value
 * @method Order               setId()                Sets the current record's "id" value
 * @method Order               setStatus()            Sets the current record's "status" value
 * @method Order               setPaidAt()            Sets the current record's "paid_at" value
 * @method Order               setUserId()            Sets the current record's "user_id" value
 * @method Order               setFirstName()         Sets the current record's "first_name" value
 * @method Order               setLastName()          Sets the current record's "last_name" value
 * @method Order               setOrganisation()      Sets the current record's "organisation" value
 * @method Order               setStreet()            Sets the current record's "street" value
 * @method Order               setCity()              Sets the current record's "city" value
 * @method Order               setPostCode()          Sets the current record's "post_code" value
 * @method Order               setCountry()           Sets the current record's "country" value
 * @method Order               setVat()               Sets the current record's "vat" value
 * @method Order               setTax()               Sets the current record's "tax" value
 * @method Order               setTaxNote()           Sets the current record's "tax_note" value
 * @method Order               setPaypalPaymentId()   Sets the current record's "paypal_payment_id" value
 * @method Order               setPaypalSaleId()      Sets the current record's "paypal_sale_id" value
 * @method Order               setPaypalStatus()      Sets the current record's "paypal_status" value
 * @method Order               setUser()              Sets the current record's "User" value
 * @method Order               setActiveCampaign()    Sets the current record's "activeCampaign" value
 * @method Order               setQuotas()            Sets the current record's "Quotas" collection
 * @method Order               setBill()              Sets the current record's "Bill" value
 * 
 * @package    policat
 * @subpackage model
 * @author     Martin
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseOrder extends myDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('orders');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('status', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 1,
             'length' => 4,
             ));
        $this->hasColumn('paid_at', 'date', null, array(
             'type' => 'date',
             'notnull' => false,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => false,
             'length' => 4,
             ));
        $this->hasColumn('first_name', 'string', 40, array(
             'type' => 'string',
             'length' => 40,
             ));
        $this->hasColumn('last_name', 'string', 40, array(
             'type' => 'string',
             'length' => 40,
             ));
        $this->hasColumn('organisation', 'string', 120, array(
             'type' => 'string',
             'length' => 120,
             ));
        $this->hasColumn('street', 'string', 120, array(
             'type' => 'string',
             'length' => 120,
             ));
        $this->hasColumn('city', 'string', 120, array(
             'type' => 'string',
             'length' => 120,
             ));
        $this->hasColumn('post_code', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('country', 'string', 2, array(
             'type' => 'string',
             'length' => 2,
             ));
        $this->hasColumn('vat', 'string', 40, array(
             'type' => 'string',
             'length' => 40,
             ));
        $this->hasColumn('tax', 'decimal', 5, array(
             'type' => 'decimal',
             'notnull' => false,
             'scale' => 2,
             'length' => 5,
             ));
        $this->hasColumn('tax_note', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('paypal_payment_id', 'string', 80, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 80,
             ));
        $this->hasColumn('paypal_sale_id', 'string', 80, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 80,
             ));
        $this->hasColumn('paypal_status', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 1,
             'length' => 4,
             ));

        $this->option('symfony', array(
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Campaign as activeCampaign', array(
             'local' => 'id',
             'foreign' => 'order_id'));

        $this->hasMany('Quota as Quotas', array(
             'local' => 'id',
             'foreign' => 'order_id'));

        $this->hasOne('Bill', array(
             'local' => 'id',
             'foreign' => 'order_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}