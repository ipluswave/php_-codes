<?php

/**
 * BaseOwner
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $status
 * @property integer $campaign_id
 * @property integer $first_widget_id
 * @property string $firstname
 * @property string $lastname
 * @property string $function
 * @property string $organisation
 * @property string $email
 * @property string $phone
 * @property string $address
 * @property string $country
 * @property string $password
 * @property Widget $FirstWidget
 * @property Campaign $Campaign
 * @property Doctrine_Collection $WidgetOwner
 * 
 * @method integer             getId()              Returns the current record's "id" value
 * @method integer             getStatus()          Returns the current record's "status" value
 * @method integer             getCampaignId()      Returns the current record's "campaign_id" value
 * @method integer             getFirstWidgetId()   Returns the current record's "first_widget_id" value
 * @method string              getFirstname()       Returns the current record's "firstname" value
 * @method string              getLastname()        Returns the current record's "lastname" value
 * @method string              getFunction()        Returns the current record's "function" value
 * @method string              getOrganisation()    Returns the current record's "organisation" value
 * @method string              getEmail()           Returns the current record's "email" value
 * @method string              getPhone()           Returns the current record's "phone" value
 * @method string              getAddress()         Returns the current record's "address" value
 * @method string              getCountry()         Returns the current record's "country" value
 * @method string              getPassword()        Returns the current record's "password" value
 * @method Widget              getFirstWidget()     Returns the current record's "FirstWidget" value
 * @method Campaign            getCampaign()        Returns the current record's "Campaign" value
 * @method Doctrine_Collection getWidgetOwner()     Returns the current record's "WidgetOwner" collection
 * @method Owner               setId()              Sets the current record's "id" value
 * @method Owner               setStatus()          Sets the current record's "status" value
 * @method Owner               setCampaignId()      Sets the current record's "campaign_id" value
 * @method Owner               setFirstWidgetId()   Sets the current record's "first_widget_id" value
 * @method Owner               setFirstname()       Sets the current record's "firstname" value
 * @method Owner               setLastname()        Sets the current record's "lastname" value
 * @method Owner               setFunction()        Sets the current record's "function" value
 * @method Owner               setOrganisation()    Sets the current record's "organisation" value
 * @method Owner               setEmail()           Sets the current record's "email" value
 * @method Owner               setPhone()           Sets the current record's "phone" value
 * @method Owner               setAddress()         Sets the current record's "address" value
 * @method Owner               setCountry()         Sets the current record's "country" value
 * @method Owner               setPassword()        Sets the current record's "password" value
 * @method Owner               setFirstWidget()     Sets the current record's "FirstWidget" value
 * @method Owner               setCampaign()        Sets the current record's "Campaign" value
 * @method Owner               setWidgetOwner()     Sets the current record's "WidgetOwner" collection
 * 
 * @package    policat
 * @subpackage model
 * @author     Martin
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseOwner extends myDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('owner');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('status', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 1,
             'length' => 4,
             ));
        $this->hasColumn('campaign_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('first_widget_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => false,
             'length' => 4,
             ));
        $this->hasColumn('firstname', 'string', 80, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 80,
             ));
        $this->hasColumn('lastname', 'string', 80, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 80,
             ));
        $this->hasColumn('function', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 200,
             ));
        $this->hasColumn('organisation', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 200,
             ));
        $this->hasColumn('email', 'string', 80, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 80,
             ));
        $this->hasColumn('phone', 'string', 80, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 80,
             ));
        $this->hasColumn('address', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 200,
             ));
        $this->hasColumn('country', 'string', 5, array(
             'type' => 'string',
             'length' => 5,
             ));
        $this->hasColumn('password', 'string', 81, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 81,
             ));

        $this->option('symfony', array(
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Widget as FirstWidget', array(
             'local' => 'first_widget_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Campaign', array(
             'local' => 'campaign_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('WidgetOwner', array(
             'local' => 'id',
             'foreign' => 'owner_id'));
    }
}