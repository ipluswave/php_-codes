<?php

/**
 * Contact
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    policat
 * @subpackage model
 * @author     Martin
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Contact extends BaseContact {

  const GENDER_FEMALE = 1;
  const GENDER_MALE = 2;
  const GENDER_NEUTRAL = 3;

  static $GENDER_SHOW = array(
      self::GENDER_FEMALE => 'female',
      self::GENDER_MALE => 'male',
      self::GENDER_NEUTRAL => 'neutral',
  );
  static $GENDER_SHOW2 = array(
      self::GENDER_FEMALE => 'â™€',
      self::GENDER_MALE => 'â™‚',
      self::GENDER_NEUTRAL => 'neutral',
  );

  public function getGenderName2() {
    if (!array_key_exists($this->getGender(), self::$GENDER_SHOW2))
      return '';
    return self::$GENDER_SHOW2[$this->getGender()];
  }

  public function getFullname() {
    $first = trim($this->getFirstname());
    $last = trim($this->getLastname());
    if ($first && $last) {
      return $first . ' ' . $last;
    } else {
      return $first . $last;
    }
  }

  public function generateSalutation($i18n) {
    switch ($this['gender']) {
      case Contact::GENDER_FEMALE:
        return $i18n->__('Dear Madam %F %L,', array('%F' => $this['firstname'], '%L' => $this['lastname']));
      case Contact::GENDER_MALE:
        return $i18n->__('Dear Sir %F %L,', array('%F' => $this['firstname'], '%L' => $this['lastname']));
      default:
        return $i18n->__('Dear Sir/Madam %F %L,', array('%F' => $this['firstname'], '%L' => $this['lastname']));
    }
  }

  /**
   * @param Petition $petition
   * @return PetitionText
   */
  public function getPetitionTextForPetition(Petition $petition) {
    return PetitionTextTable::getInstance()->fetchByPetitionAndPrefLang($petition, $this->getLanguageId() ? : 'en');
  }

  public function getPledgeInfoColumns($info_columns) {
    $metas = array();
    foreach ($this->getContactMeta() as $meta) {
      /* @var $meta ContactMeta */
      $metas[$meta->getMailingListMetaId()] = $meta;
    }

    $ret = array();

    foreach ($info_columns as $info) {
      if (array_key_exists($info, $metas)) {
        $meta = $metas[$info];
        if ($meta->getMailingListMetaChoiceId()) {
          $ret[] = $meta->getMailingListMetaChoice()->getChoice();
        }
      } elseif ($info == 'country') {
        $ret[] = $this->getCountry();
      }
    }

    return implode(', ', $ret);
  }

  /**
   *
   * @param int $petition_id
   * @return PetitionContact
   */
  public function getPetitionContactByPetition($petition_id) {
    return PetitionContactTable::getInstance()->findOneByPetitionIdAndContactId($petition_id, $this->getId());
  }

  public function getCountryName() {
    $iso = $this->getCountry();
    if ($iso) {
      $i18n = sfContext::getInstance()->getI18N();
      if ($i18n) {
        $country = $i18n->getCountry($iso);
        if ($country) {
          return $country;
        }
      }

      return $iso;
    }
    return '';
  }

}
