<?php
/*
 * Copyright (c) 2016, webvariants GmbH <?php Co. KG, http://www.webvariants.de
 *
 * This file is released under the terms of the MIT license. You can find the
 * complete text in the attached LICENSE file or online at:
 *
 * http://www.opensource.org/licenses/mit-license.php
 */

/**
 * PledgeTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PledgeTable extends Doctrine_Table {

  const STATUS_YES = 1;
  const STATUS_NO = 2;
  const STATUS_NO_COMMENT = 3;

  static $STATUS_SHOW = array(
      self::STATUS_YES => 'yes',
      self::STATUS_NO => 'no',
      self::STATUS_NO_COMMENT => 'n/a',
      null => '',
      '' => ''
  );

  static $STATUS_CHOICES = array(
      self::STATUS_NO_COMMENT => 'n/a',
      self::STATUS_YES => 'yes',
      self::STATUS_NO => 'no'
  );

  /**
   * Returns an instance of this class.
   *
   * @return PledgeTable
   */
  public static function getInstance() {
    return Doctrine_Core::getTable('Pledge');
  }

  /**
   *
   * @param PledgeItem $pledge_item
   * @param Contact $contact
   * @return Pledge
   */
  public function findOneByPledgeItemAndContact(PledgeItem $pledge_item, Contact $contact) {
    return $this->createQuery('p')->where('p.pledge_item_id = ?', $pledge_item->getId())->andWhere('p.contact_id = ?', $contact->getId())->fetchOne();
  }

  /**
   *
   * @param int $pledge_item_id
   * @param Contact $contact
   * @return Pledge
   */
  public function findOneByPledgeItemIdAndContact($pledge_item_id, Contact $contact) {
    return $this->createQuery('p')->where('p.pledge_item_id = ?', $pledge_item_id)->andWhere('p.contact_id = ?', $contact->getId())->fetchOne();
  }

  public function countStatus(PledgeItem $pledge_item, $status, $target_list = null) {
    $query = $this->createQuery('p')->where('p.status = ?', $status)->andWhere('pledge_item_id = ?', $pledge_item->getId());

    if ($target_list) {
      /* @var $target_list MailingList */

      $query->leftJoin('p.Contact c')->andWhere('c.mailing_list_id = ?', $target_list->getId());
    }

    return $query->count();
  }

  public function getPledgesForContact($contact, $active_pledge_item_ids) {
    if (!$active_pledge_item_ids) {
      return array();
    }
    $contact_pledges = array();
    foreach ($contact->getPledges() as $pledge) {
      /* @var $pledge Pledge */
      if ($pledge->getStatus() && in_array($pledge->getPledgeItemId(), $active_pledge_item_ids))
        $contact_pledges[$pledge->getPledgeItemId()] = $pledge->getStatus();
    }
    return $contact_pledges;
  }

  public function getPledgesForContacts($contacts, $active_pledge_item_ids) {
    if (!$active_pledge_item_ids) {
      return array();
    }

    $contact_ids = array();
    foreach ($contacts as $contact) {
      /* @var $contact Contact */
      $contact_ids[] = $contact->getId();
    }

    if (!$contact_ids) {
      return array();
    }

    $pledges = array();

    foreach ($this->createQuery('p')
      ->select('p.contact_id, p.pledge_item_id, p.status')
      ->whereIn('p.contact_id', $contact_ids)
      ->andWhereIn('p.pledge_item_id', $active_pledge_item_ids)
      ->fetchArray() as $pledge) {

      if (!array_key_exists($pledge['contact_id'], $pledges)) {
        $pledges[$pledge['contact_id']] = array();
      }

      $pledges[$pledge['contact_id']][$pledge['pledge_item_id']] = $pledge['status'];
    }

    return $pledges;
  }

}
