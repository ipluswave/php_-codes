<?php

/**
 * MailingListTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class MailingListTable extends Doctrine_Table {

  const STATUS_DRAFT = 1;
  const STATUS_ACTIVE = 2;
  const STATUS_DELETED = 3;

  static $STATUS_SHOW = array(
      self::STATUS_DRAFT => 'draft',
      self::STATUS_ACTIVE => 'active',
      self::STATUS_DELETED => 'deleted'
  );

  /**
   * Returns an instance of this class.
   *
   * @return MailingListTable
   */
  public static function getInstance() {
    return Doctrine_Core::getTable('MailingList');
  }

  /**
   *
   * @param int $id
   * @param boolean $deleted_too
   * @return MailingList
   */
  public function findById($id, $deleted_too = false) {
    if (!is_numeric($id))
      return false;

    $query = $this->createQuery('t')->where('t.id = ?', $id);

    if (!$deleted_too)
      $query->andWhere('t.status != ?', self::STATUS_DELETED);

    return $query->fetchOne();
  }

  /**
   *
   * @param int $id
   * @return MailingList
   */
  public function findAndFetchCached($id) {
    return $this->createQuery('ml')
        ->where('ml.id = ?', $id)
        ->addFrom('ml.MailingListMeta mlm')
        ->useResultCache()
        ->fetchOne();
  }

  /**
   *
   * @param Campaign $campaign
   * @return Doctrine_Query
   */
  public function queryByCampaign(Campaign $campaign, $active_only = false, $deleted_too = false) {
    $query = $this->createQuery('ml')->orderBy('ml.id')->where('ml.campaign_id = ?', $campaign->getId());
    if ($active_only)
      $query->andWhere('ml.status = ?', MailingListTable::STATUS_ACTIVE);
    else {
      if (!$deleted_too)
        $query->andWhere('ml.status != ?', MailingListTable::STATUS_DELETED);
    }

    return $query;
  }

  /**
   *
   * @return Doctrine_Query
   */
  public function queryGlobal() {
    return $this->createQuery('ml')->orderBy('ml.id')->where('ml.campaign_id is null');
  }

  /**
   *
   * @return Doctrine_Query
   */
  public function queryGlobalActive() {
    return $this->queryGlobal()->andWhere('ml.status = ?', MailingListTable::STATUS_ACTIVE);
  }

  /**
   *
   * @param Campaign $campaign
   * @return Doctrine_Query
   */
  public function queryByCampaignAndUser(Campaign $campaign, sfGuardUser $user, MailingList $existing = null, $active_only = false) {
    $query = $this->queryByCampaign($campaign, $active_only)->leftJoin('ml.TargetListRights tr');
    if ($existing)
      return $query->andWhere('(tr.user_id = ? AND tr.active = 1) OR ml.id = ?', array($user->getId(), $existing->getId()));
    else
      return $query->andWhere('tr.user_id = ? AND tr.active = 1', $user->getId());
  }

  public function queryByCampaignForUser(Campaign $campaign, sfGuardUser $user, MailingList $existing = null, $active_only = false, $id = null) {
    if ($user && !$user->isCampaignAdmin($campaign)) {
      $query = $this->queryByCampaignAndUser($campaign, $user, $existing, $active_only);
    } else {
      $query = $this->queryByCampaign($campaign, $active_only, false);
    }

    if ($id) {
      $query->andWhere('ml.id = ?', $id);
    }

    return $query;
  }

  /**
   *
   * @param MailingList $source
   * @param Campaign $campaign
   * @param string $name
   * @return MailingList|null 
   */
  public function copy(MailingList $source, Campaign $campaign = null, $name = null) {
    $con = $this->getConnection();
    $con->beginTransaction();
    try {
      $target = new MailingList();
      $target->setStatus(MailingListTable::STATUS_DRAFT);
      if ($name)
        $target->setName($name);
      else
        $target->setName($source->getName() . ' copy ' . gmdate('Y-M-d H:i'));
      if ($campaign)
        $target->setCampaign($campaign);
      $target->save();

      $meta_ids = array();
      $choice_ids = array();

      foreach ($source->getMailingListMeta() as $meta_source) {
        /* @var $meta_source MailingListMeta */
        $meta = new MailingListMeta();
        $meta->setMailingList($target);
        $meta->setKind($meta_source->getKind());
        $meta->setName($meta_source->getName());
        $meta->setSubst($meta_source->getSubst());
        $meta->save();
        $meta_ids[$meta_source->getId()] = $meta->getId();
        foreach ($meta_source->getMailingListMetaChoice() as $choice_source) {
          /* @var $choice_source MailingListMetaChoice */
          $choice = new MailingListMetaChoice();
          $choice->setMailingListMeta($meta);
          $choice->setChoice($choice_source->getChoice());
          $choice->save();
          $choice_ids[$choice_source->getId()] = $choice->getId();
        }
      }

      foreach ($source->getContact() as $contact_source) {
        /* @var $contact_source Contact */
        $contact = new Contact();
        $contact->setMailingList($target);
        $contact->setStatus($contact_source->getStatus());
        $contact->setEmail($contact_source->getEmail());
        $contact->setGender($contact_source->getGender());
        $contact->setFirstname($contact_source->getFirstname());
        $contact->setLastname($contact_source->getLastname());
        $contact->setCountry($contact_source->getCountry());
        $contact->save();

        foreach ($contact_source->getContactMeta() as $contact_meta_source) {
          /* @var $contact_meta_source ContactMeta */
          $contact_meta = new ContactMeta();
          $contact_meta->setContact($contact);
          $contact_meta->setValue($contact_meta_source->getValue());
          $contact_meta->setMailingListMetaId($meta_ids[$contact_meta_source->getMailingListMetaId()]);
          if ($contact_meta_source->getMailingListMetaChoiceId())
            $contact_meta->setMailingListMetaChoiceId($choice_ids[$contact_meta_source->getMailingListMetaChoiceId()]);
          $contact_meta->save();
        }
      }

      $con->commit();

      return $target;
    } catch (Exception $e) {
      $con->rollback();
    }

    return null;
  }

  public function getChoices(Petition $petition, $first, $active_pledge_item_ids = false) {
    $ts = $petition->getTargetSelectors();
    $choices = array();

    $query = $this
      ->createQuery('ml')
//      ->useResultCache()
      ->where('ml.id = ?', $petition->getMailingListId());

    $fix_field = false;
    $direct_contact = false;
    if (count($ts) > 1) {
      $second = $ts[1]['id'];
      if (is_numeric($second)) {
        $query
          ->leftJoin('ml.MailingListMeta mlm2')
          ->andWhere('mlm2.id = ?', $second)
          ->leftJoin('mlm2.MailingListMetaChoice mlmc2')
          ->leftJoin('mlmc2.ContactMeta cm2')
          ->leftJoin('cm2.Contact c')
          ->select('DISTINCT ml.id, mlm2.id, mlmc2.*');
      } else {
        $fix_field = true;
        $col = $ts[1]['id'];
        $query
          ->leftJoin('ml.Contact c')
          ->groupBy("c.$col")
          ->select("DISTINCT ml.id, c.id, c.$col");
      }
    } else {
      $direct_contact = true;
      $query
        ->leftJoin('ml.Contact c')
        ->select('DISTINCT ml.id, c.firstname, c.lastname, c.country');
    }

    if (is_numeric(($ts[0]['id']))) {
      $query->leftJoin('c.ContactMeta cm1');
      if (array_key_exists('kind', $ts[0]) && $ts[0]['kind'] == MailingListMeta::KIND_MAPPING) {
        $query->andWhere('cm1.mailing_list_meta_choice_id IN (SELECT mlmc1.id FROM MailingListMetaChoice mlmc1 WHERE mlmc1.mailing_list_meta_id = ? AND mlmc1.choice = ?)', array($ts[0]['meta_id'], $first));
      } else {
        $query->andWhere('cm1.mailing_list_meta_choice_id = ?', $first);
      }
    } else {
      $col = $ts[0]['id'];
      $query->andWhere("c.$col = ?", $first); // should be secure
    }

    $list = $query->execute();

    $pledges = array();
    $infos = array();
    $pledge_table = PledgeTable::getInstance();
    $pledge_info_columns = $petition->getPledgeInfoColumnsArray();

    if ($list) {
      if ($direct_contact) {
        foreach ($list[0]['Contact'] as $choice) {
          /* @var $choice Contact */
          $choices[$choice['id']] = $choice['firstname'] . ' ' . $choice['lastname'];
        }

        $pledges = $pledge_table->getPledgesForContacts($list[0]['Contact'], $active_pledge_item_ids);
        $infos = ContactTable::getInstance()->getPledgeInfoColumns($list[0]['Contact'], $pledge_info_columns);
      } else {
        if ($fix_field) {
          $col = $ts[1]['id'];
          foreach ($list[0]['Contact'] as $choice) {
            $choices[$choice[$col]] = $choice[$col];
          }
        } else {
          foreach ($list[0]['MailingListMeta'][0]['MailingListMetaChoice'] as $choice) {
            $choices[$choice['id']] = $choice['choice'];
          }
        }
      }
    }

    return array('choices' => $choices, 'pledges' => ($direct_contact && $active_pledge_item_ids !== false) ? $pledges : false, 'infos' => $infos);
  }

}
