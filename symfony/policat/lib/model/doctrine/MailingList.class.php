<?php

/**
 * MailingList
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    policat
 * @subpackage model
 * @author     Martin
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class MailingList extends BaseMailingList {

  const FIX_EMAIL = 'email';
  const FIX_GENDER = 'gender';
  const FIX_FIRSTNAME = 'firstname';
  const FIX_LASTNAME = 'lastname';
  const FIX_COUNTRY = 'country';

  static $FIX2SUBST = array(
      self::FIX_EMAIL => '#EMAIL#',
      self::FIX_GENDER => '#GENDER#',
      self::FIX_FIRSTNAME => '#FIRSTNAME#',
      self::FIX_LASTNAME => '#LASTNAME#',
      self::FIX_COUNTRY => '#COUNTRY#'
  );
  static $FIX_SHOW = array(
      self::FIX_EMAIL => 'E-mail',
      self::FIX_GENDER => 'Gender',
      self::FIX_FIRSTNAME => 'Firstname',
      self::FIX_LASTNAME => 'Lastname',
      self::FIX_COUNTRY => 'Country'
  );

  public function calcIsEditableByPermission($permissions) {
    return true;
  }

  public function getSubstFields($ignore_dummy_fields = true) {
    $ret = array();
    foreach (self::$FIX2SUBST as $field => $subst)
      $ret[$subst] = array(
          'type' => 'fix',
          'id' => $field,
          'name' => self::$FIX_SHOW[$field]
      );
    foreach ($this->getMailingListMeta() as $meta) {
      /* @var $meta MailingListMeta */
      $type = '';
      switch ($meta['kind']) {
        case MailingListMeta::KIND_FREE:
          $type = 'free';
          break;
        case MailingListMeta::KIND_CHOICE:
          $type = 'choice';
          break;
        case MailingListMeta::KIND_MAPPING:
          $type = 'mapping';
          break;
      }
      if ($ignore_dummy_fields && $type == 'mapping') {
        continue;
      }
      $ret[$meta['subst']] = array(
          'type' => $type,
          'id' => $meta['id'],
          'name' => $meta['name'],
          'multi' => $meta->getMulti()
      );
    }
    return $ret;
  }

  public function invalidateCache() {
    $this->save();
  }

  public function getStatusName() {
    return MailingListTable::$STATUS_SHOW[$this->getStatus()];
  }

  private $count_actions_cache = null;

  public function countActions() {
    if ($this->count_actions_cache !== null)
      return $this->count_actions_cache;
    return $this->count_actions_cache = PetitionTable::getInstance()->countActionsByTargetList($this);
  }

  private $count_actions_deleted_cache = null;

  public function countActionsDeleted() {
    if ($this->count_actions_deleted_cache !== null)
      return $this->count_actions_deleted_cache;
    return $this->count_actions_deleted_cache = PetitionTable::getInstance()->countActionsDeletedByTargetList($this);
  }

  public function getTargetChoices() {
    $target_choices = array('' => '', 'country' => 'Country');
    if (!$this->isNew()) {
      /* @var $this MailingList  */
      foreach ($this->getSubstFields(false) as $subst_field) {
        if ($subst_field['type'] != 'fix' && $subst_field['type'] != 'free') {
          $target_choices[$subst_field['id']] = $subst_field['name'];
        }
      }
    }

    return $target_choices;
  }

  public function getPledgeColumns() {
    $choices = array('country' => 'Country');
    if (!$this->isNew()) {
      /* @var $this MailingList  */
      foreach ($this->getSubstFields(false) as $subst_field) {
        if ($subst_field['type'] != 'fix' && $subst_field['type'] != 'mapping') {
          $choices[$subst_field['id']] = $subst_field['name'];
        }
      }
    }

    return $choices;
  }

}